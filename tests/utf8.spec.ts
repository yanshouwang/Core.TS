import { EncodingCase } from "./case";
import { Encoding } from "../src/core";
import { assert } from "chai";

const cases0 = [
    new EncodingCase("BMP - 基本多文种平面", "Hello, World! - 你好，世界！ - Σ✨", [0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x20, 0x2D, 0x20, 0xE4, 0xBD, 0xA0, 0xE5, 0xA5, 0xBD, 0xEF, 0xBC, 0x8C, 0xE4, 0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81, 0x20, 0x2D, 0x20, 0xCE, 0xA3, 0xE2, 0x9C, 0xA8]),
    new EncodingCase("SMP - 多文种补充平面", "𐎧𐏈𐏋𐓊𐓉𛀁🀀🦝", [0xF0, 0x90, 0x8E, 0xA7, 0xF0, 0x90, 0x8F, 0x88, 0xF0, 0x90, 0x8F, 0x8B, 0xF0, 0x90, 0x93, 0x8A, 0xF0, 0x90, 0x93, 0x89, 0xF0, 0x9B, 0x80, 0x81, 0xF0, 0x9F, 0x80, 0x80, 0xF0, 0x9F, 0xA6, 0x9D]),
    new EncodingCase("SIP - 表意文字补充平面", "𠀀𠀁𠀂𠀃𠀄𠀅𠀆𠀇𠀈𠀉𠀊𠀋𠀌", [0xF0, 0xA0, 0x80, 0x80, 0xF0, 0xA0, 0x80, 0x81, 0xF0, 0xA0, 0x80, 0x82, 0xF0, 0xA0, 0x80, 0x83, 0xF0, 0xA0, 0x80, 0x84, 0xF0, 0xA0, 0x80, 0x85, 0xF0, 0xA0, 0x80, 0x86, 0xF0, 0xA0, 0x80, 0x87, 0xF0, 0xA0, 0x80, 0x88, 0xF0, 0xA0, 0x80, 0x89, 0xF0, 0xA0, 0x80, 0x8A, 0xF0, 0xA0, 0x80, 0x8B, 0xF0, 0xA0, 0x80, 0x8C]),
    new EncodingCase("SSP - 特别用途补充平面", "\uDB40\uDC01\uDB40\uDC7F", [0xF3, 0xA0, 0x80, 0x81, 0xF3, 0xA0, 0x81, 0xBF]),
    new EncodingCase("PUA - 私人使用区", "\uDB80\uDC00\uDBFF\uDFFF", [0xF3, 0xB0, 0x80, 0x80, 0xF4, 0x8F, 0xBF, 0xBF])
]

const cases1 = [
    new EncodingCase("高位代理异常", "\uDC00\uDC00", []),
    new EncodingCase("低位代理异常", "\uDB00\uDB00", []),
];

const cases2 = [
    new EncodingCase("第 1 字节错误 : 越界", "", [0xF5]),
    new EncodingCase("第 1 字节错误 : 1 字节", "", [0x80]),
    new EncodingCase("第 2 字节丢失 : 2 字节", "", [0xC0]),
    new EncodingCase("第 2 字节丢失 : 3 字节", "", [0xE0]),
    new EncodingCase("第 2 字节丢失 : 4 字节", "", [0xF0]),
    new EncodingCase("第 2 字节错误 : 2 字节", "", [0xC0, 0x00]),
    new EncodingCase("第 2 字节错误 : 3 字节", "", [0xE0, 0x00, 0x80]),
    new EncodingCase("第 2 字节错误 : 4 字节", "", [0xF0, 0x00, 0x80, 0x80]),
    new EncodingCase("第 2 字节错误 : 越界", "", [0xF4, 0x90, 0x80, 0x80]),
    new EncodingCase("第 3 字节丢失 : 3 字节", "", [0xE0, 0x80]),
    new EncodingCase("第 3 字节丢失 : 4 字节", "", [0xF0, 0x80]),
    new EncodingCase("第 3 字节错误 : 3 字节", "", [0xE0, 0x80, 0x00]),
    new EncodingCase("第 3 字节错误 : 4 字节", "", [0xF0, 0x80, 0x00, 0x80]),
    new EncodingCase("第 4 字节丢失", "", [0xF0, 0x80, 0x80]),
    new EncodingCase("第 4 字节错误", "", [0xF0, 0x80, 0x80, 0x00]),
];

suite("UTF8.toArray", () => {
    cases0.forEach(item => {
        const actual = Encoding.UTF8.toBytes(item.str);
        const expected = new Uint8Array(item.codes);
        test(item.title, () => assert.deepEqual(actual, expected));
    });
    cases1.forEach(item => test(item.title, () => assert.throw(() => Encoding.UTF8.toBytes(item.str), RangeError)));
});

suite("UTF8.toString", () => {
    cases0.forEach(item => {
        const codes = new Uint8Array(item.codes);
        const actual = Encoding.UTF8.toString(codes);
        const expected = item.str;
        test(item.title, () => assert.equal(actual, expected));
    });
    cases2.forEach(item => {
        const codes = new Uint8Array(item.codes);
        test(item.title, () => assert.throw(() => Encoding.UTF8.toString(codes), RangeError));
    });
});