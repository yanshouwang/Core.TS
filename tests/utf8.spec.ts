import { assert } from "chai";
import { Encodings } from "../src/core";

class Case {
    readonly title: string;
    readonly str: string;
    readonly array: number[];

    constructor(title: string, oriStr: string, array: number[]) {
        this.title = title;
        this.str = oriStr;
        this.array = array;
    }
}

const cases = [
    new Case("BMP - 基本多文种平面", "Hello, World! - 你好，世界！ - ✨", [0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x20, 0x2D, 0x20, 0xE4, 0xBD, 0xA0, 0xE5, 0xA5, 0xBD, 0xEF, 0xBC, 0x8C, 0xE4, 0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81, 0x20, 0x2D, 0x20, 0xE2, 0x9C, 0xA8]),
    new Case("SMP - 多文种补充平面", "𐎧𐏈𐏋𐓊𐓉𛀁🀀🦝", [0xF0, 0x90, 0x8E, 0xA7, 0xF0, 0x90, 0x8F, 0x88, 0xF0, 0x90, 0x8F, 0x8B, 0xF0, 0x90, 0x93, 0x8A, 0xF0, 0x90, 0x93, 0x89, 0xF0, 0x9B, 0x80, 0x81, 0xF0, 0x9F, 0x80, 0x80, 0xF0, 0x9F, 0xA6, 0x9D]),
    new Case("SIP - 表意文字补充平面", "𠀀𠀁𠀂𠀃𠀄𠀅𠀆𠀇𠀈𠀉𠀊𠀋𠀌", [0xF0, 0xA0, 0x80, 0x80, 0xF0, 0xA0, 0x80, 0x81, 0xF0, 0xA0, 0x80, 0x82, 0xF0, 0xA0, 0x80, 0x83, 0xF0, 0xA0, 0x80, 0x84, 0xF0, 0xA0, 0x80, 0x85, 0xF0, 0xA0, 0x80, 0x86, 0xF0, 0xA0, 0x80, 0x87, 0xF0, 0xA0, 0x80, 0x88, 0xF0, 0xA0, 0x80, 0x89, 0xF0, 0xA0, 0x80, 0x8A, 0xF0, 0xA0, 0x80, 0x8B, 0xF0, 0xA0, 0x80, 0x8C]),
    new Case("SSP - 特别用途补充平面", "\uDB40\uDC01\uDB40\uDC7F", [0xF3, 0xA0, 0x80, 0x81, 0xF3, 0xA0, 0x81, 0xBF]),
    new Case("PUA - 私人使用区", "\uDB80\uDC00\uDBFF\uDFFF", [0xF3, 0xB0, 0x80, 0x80, 0xF4, 0x8F, 0xBF, 0xBF])
]

describe("UTF8.toArray", () => {
    cases.forEach(item => {
        const actual = Encodings.UTF8.toArray(item.str);
        const expected = item.array;
        it(item.title, () => assert.deepEqual(actual, expected));
    });
});

describe("UTF8.toString", () => {
    cases.forEach(item => {
        const actual = Encodings.UTF8.toString(item.array);
        const expected = item.str;
        it(item.title, () => assert.equal(actual, expected));
    });
});