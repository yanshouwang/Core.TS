import { EncodingCase } from "./case";
import { Encodings } from "../src/core";
import { assert } from "chai";

const cases0 = [
    new EncodingCase("符号 1", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F", [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]),
    new EncodingCase("符号 2", " !\"#$%&\'()*+,-./", [0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F]),
    new EncodingCase("数字", "0123456789", [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39]),
    new EncodingCase("符号 3", ":;<=>?@", [0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40]),
    new EncodingCase("大写字母", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", [0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A]),
    new EncodingCase("符号 4", "[\\]^_`", [0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60]),
    new EncodingCase("小写字母", "abcdefghijklmnopqrstuvwxyz", [0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A]),
    new EncodingCase("符号 5", "{|}~\u007F", [0x7B, 0x7C, 0x7D, 0x7E, 0x7F])
];

const cases1 = [
    new EncodingCase("字符串越界", "ASCII 不支持汉字", [])
];

const cases2 = [
    new EncodingCase("数组越界", "", [0x80])
];

suite("ASCII.toArray", () => {
    cases0.forEach(item => {
        const actual = Encodings.ASCII.toBytes(item.str);
        const expected = new Uint8Array(item.codes);
        test(item.title, () => assert.deepEqual(actual, expected));
    });
    cases1.forEach(item => test(item.title, () => assert.throw(() => Encodings.ASCII.toBytes(item.str), RangeError)));
});

suite("ASCII.toString", () => {
    cases0.forEach(item => {
        const codes = new Uint8Array(item.codes);
        const actual = Encodings.ASCII.toString(codes);
        const expected = item.str;
        test(item.title, () => assert.equal(actual, expected));
    });
    cases2.forEach(item => {
        const codes = new Uint8Array(item.codes);
        test(item.title, () => assert.throw(() => Encodings.ASCII.toString(codes), RangeError))
    });
});